{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BookingMgmtApp BookingMgmtApp is a simple app allowing users to manage accommodation booking in a hotel. It is written in Java and uses the JavaFX framework and JDBC , and depends on a MariaDB MySQL database. Internally, the project aims to implement various enterprise software programming patterns, such as the DAO pattern, used commonly in commercial applications. Current Features View and manage bookings. View rooms. Project structure The project is organized into packages, with the following structure: java : Contains the packages and classes of the project. model.entities : Contains the entity classes of the system. Guest : Represents the Guest entity. Room : Represents the Room entity. Booking : Represents the Booking entity. RoomType : Represents the RoomType entity. model.dao : Contains the interfaces for the DAO classes. GuestDao : Interface for the Guest DAO. RoomDao : Interface for the Room DAO. BookingDao : Interface for the Booking DAO. RoomTypeDao : Interface for the RoomType DAO. DaoFactory : Class for instantiating DAOs. model.dao.impl : Contains the implementations of the DAO interfaces. GuestDaoJDBC : Implementation of the Guest DAO using JDBC. RoomDaoJDBC : Implementation of the Room DAO using JDBC. BookingDaoJDBC : Implementation of the Booking DAO using JDBC. RoomTypeDaoJDBC : Implementation of the RoomType DAO using JDBC. model.service : Contains the service classes of the system along with helper classes. BookingService : Service class for the Booking entity. ServiceResponse : Helper class for service responses. ServiceFactory : Class for instantiating services. model.dto : Contains DTO-style classes that aggregate various related entities. BookingDetails : Represents a Booking along with the associated Guest and Room. RoomDetails : Represents a Room along with the associated RoomType. RoomWithBookings : Represents a Room along with a list of associated Bookings. BookingSortOption : Enum for sorting options in the BookingService. db : Contains the classes related to the database connection. DB : Utility class for configuring the database connection. DbException : Custom exception for handling database errors. DaoFactory : Class for instantiating DAOs. controller : Contains the controller classes for the JavaFX GUI. MainController : Controller for the main window. RoomController : Controller for the Room view. BookingController : Controller for the Booking view. View : Enum for the different views in the application. util : Contains utility classes. ScriptRunner : Utility class for running SQL scripts. Demo.java : Demonstration class with examples of using the functionalities. BookingMgmtApp.java : Main class for running the JavaFX application. db.properties : Configuration file with the database access information. init.sql : SQL script for initializing the database. seed.sql : SQL script for seeding the database with sample data. resources : Contains the resources of the project, mainly the FXML files for the GUI. main-view.fxml : FXML file for the main window. rooms.fxml : FXML file for the Room view. booking.fxml : FXML file for the Booking view. booking-dialog.fxml : FXML file for the Booking dialog. Detailed documentation for each individual class and method can be found in the source code in the form of Javadoc comments. Running the Application The application requires a MariaDB MySQL database running at localhost:3306 to be set up. The database connection details should be configured in the db.properties file. The application also requires the MySQL JDBC driver to be included in the classpath. The application automatically creates the necessary tables in the database by running the init.sql script. The seed.sql script can be used to populate the database with sample data. To run the application, follow these steps: 1. Clone the project repository to your local environment. 2. Set up a MariaDB MySQL database and configure the connection details in the db.properties file. 3. Import the project into your favorite IDE. 4. Ensure that the dependencies are correctly configured (e.g., MySQLConnector). 5. Run the Demo.java class to see examples of using the functionalities. 6. Run the BookingMgmtApp.java class to start the JavaFX application. 7. Use the GUI to interact with the application. 8. Enjoy managing your hotel bookings! Database Schema Future Enhancements Add functionality to update every entity. Add functionality to manage guests. Add functionality to manage rooms. Implement more complex business logic (e.g., validation) Implement more complex queries and reports. Improve the GUI design and user experience. Add support for multiple users and authentication. Optimize database queries and data retrieval.","title":"BookingMgmtApp"},{"location":"#bookingmgmtapp","text":"BookingMgmtApp is a simple app allowing users to manage accommodation booking in a hotel. It is written in Java and uses the JavaFX framework and JDBC , and depends on a MariaDB MySQL database. Internally, the project aims to implement various enterprise software programming patterns, such as the DAO pattern, used commonly in commercial applications.","title":"BookingMgmtApp"},{"location":"#current-features","text":"View and manage bookings. View rooms.","title":"Current Features"},{"location":"#project-structure","text":"The project is organized into packages, with the following structure: java : Contains the packages and classes of the project. model.entities : Contains the entity classes of the system. Guest : Represents the Guest entity. Room : Represents the Room entity. Booking : Represents the Booking entity. RoomType : Represents the RoomType entity. model.dao : Contains the interfaces for the DAO classes. GuestDao : Interface for the Guest DAO. RoomDao : Interface for the Room DAO. BookingDao : Interface for the Booking DAO. RoomTypeDao : Interface for the RoomType DAO. DaoFactory : Class for instantiating DAOs. model.dao.impl : Contains the implementations of the DAO interfaces. GuestDaoJDBC : Implementation of the Guest DAO using JDBC. RoomDaoJDBC : Implementation of the Room DAO using JDBC. BookingDaoJDBC : Implementation of the Booking DAO using JDBC. RoomTypeDaoJDBC : Implementation of the RoomType DAO using JDBC. model.service : Contains the service classes of the system along with helper classes. BookingService : Service class for the Booking entity. ServiceResponse : Helper class for service responses. ServiceFactory : Class for instantiating services. model.dto : Contains DTO-style classes that aggregate various related entities. BookingDetails : Represents a Booking along with the associated Guest and Room. RoomDetails : Represents a Room along with the associated RoomType. RoomWithBookings : Represents a Room along with a list of associated Bookings. BookingSortOption : Enum for sorting options in the BookingService. db : Contains the classes related to the database connection. DB : Utility class for configuring the database connection. DbException : Custom exception for handling database errors. DaoFactory : Class for instantiating DAOs. controller : Contains the controller classes for the JavaFX GUI. MainController : Controller for the main window. RoomController : Controller for the Room view. BookingController : Controller for the Booking view. View : Enum for the different views in the application. util : Contains utility classes. ScriptRunner : Utility class for running SQL scripts. Demo.java : Demonstration class with examples of using the functionalities. BookingMgmtApp.java : Main class for running the JavaFX application. db.properties : Configuration file with the database access information. init.sql : SQL script for initializing the database. seed.sql : SQL script for seeding the database with sample data. resources : Contains the resources of the project, mainly the FXML files for the GUI. main-view.fxml : FXML file for the main window. rooms.fxml : FXML file for the Room view. booking.fxml : FXML file for the Booking view. booking-dialog.fxml : FXML file for the Booking dialog. Detailed documentation for each individual class and method can be found in the source code in the form of Javadoc comments.","title":"Project structure"},{"location":"#running-the-application","text":"The application requires a MariaDB MySQL database running at localhost:3306 to be set up. The database connection details should be configured in the db.properties file. The application also requires the MySQL JDBC driver to be included in the classpath. The application automatically creates the necessary tables in the database by running the init.sql script. The seed.sql script can be used to populate the database with sample data. To run the application, follow these steps: 1. Clone the project repository to your local environment. 2. Set up a MariaDB MySQL database and configure the connection details in the db.properties file. 3. Import the project into your favorite IDE. 4. Ensure that the dependencies are correctly configured (e.g., MySQLConnector). 5. Run the Demo.java class to see examples of using the functionalities. 6. Run the BookingMgmtApp.java class to start the JavaFX application. 7. Use the GUI to interact with the application. 8. Enjoy managing your hotel bookings!","title":"Running the Application"},{"location":"#database-schema","text":"","title":"Database Schema"},{"location":"#future-enhancements","text":"Add functionality to update every entity. Add functionality to manage guests. Add functionality to manage rooms. Implement more complex business logic (e.g., validation) Implement more complex queries and reports. Improve the GUI design and user experience. Add support for multiple users and authentication. Optimize database queries and data retrieval.","title":"Future Enhancements"},{"location":"interface/","text":"Interface This application provides a user interface for managing hotel bookings. The main features include viewing and managing bookings, viewing rooms, and making new bookings. The interface currently offers a handful of different functional elements. It is also currently written in Polish, but the plan is to internationalize it in the future. The Sidebar The sidebar is located on the left side of the application window. It contains buttons for navigating between different views of the application. Its elements include: Logo display ( 1 ): The logo of the application along with the current version number. Booking button ( 2 ): Navigates to the Booking view. Rooms button ( 3 ): Navigates to the Rooms view. Guests button ( 4 ): Currently not implemented. Exit button ( 5 ): Exits the application. Booking View The Booking view displays a list of bookings along with the associated guest and room information. It provides functionalities for viewing, adding, and deleting bookings. Provides a range of sorting and filtering options that dynamically update the table. The Booking view includes: A table of bookings ( 1 ): Displays the list of bookings in a table. Guest info display ( 2 ): Displays the information of the guest associated with the selected booking. Room info display ( 3 ): Displays the information of the room associated with the selected booking. \"From\" date picker ( 4 ): Selects the start date of range to filter bookings. Automatically updates the table. \"To\" date picker ( 5 ): Selects the end date of range to filter bookings. Automatically updates the table. \"Sort by\" dropdown ( 6 ): Sorts the bookings based on the selected criteria. Automatically updates the table. \"Add Booking\" button ( 7 ): Opens a dialog to add a new booking. \"Delete Booking\" button ( 8 ): Deletes the selected booking. Shows a confirmation dialog first. New Booking Dialog The New Booking dialog allows the user to add a new booking to the system. It includes the following elements: Guest table ( 1 ): Displays the list of guests to choose from. Room table ( 2 ): Displays the list of rooms to choose from. Dynamically updated based on selected dates according to availability. \"From\" date picker ( 3 ): Selects the start date of the booking. \"To\" date picker ( 4 ): Selects the end date of the booking. \"Add Booking\" button ( 5 ): Adds the booking to the system. Greyed out until both a guest and a room are selected. A confirmation dialog is shown after successfully adding a booking. Rooms View The Rooms view displays a list of rooms along with the associated room type information. It provides functionality for viewing rooms. The Rooms view includes: A table of rooms ( 1 ): Displays the list of rooms in a table. Add Room button ( 2 ): Currently not implemented. Delete Room button ( 3 ): Currently not implemented.","title":"Interface"},{"location":"interface/#interface","text":"This application provides a user interface for managing hotel bookings. The main features include viewing and managing bookings, viewing rooms, and making new bookings. The interface currently offers a handful of different functional elements. It is also currently written in Polish, but the plan is to internationalize it in the future.","title":"Interface"},{"location":"interface/#the-sidebar","text":"The sidebar is located on the left side of the application window. It contains buttons for navigating between different views of the application. Its elements include: Logo display ( 1 ): The logo of the application along with the current version number. Booking button ( 2 ): Navigates to the Booking view. Rooms button ( 3 ): Navigates to the Rooms view. Guests button ( 4 ): Currently not implemented. Exit button ( 5 ): Exits the application.","title":"The Sidebar"},{"location":"interface/#booking-view","text":"The Booking view displays a list of bookings along with the associated guest and room information. It provides functionalities for viewing, adding, and deleting bookings. Provides a range of sorting and filtering options that dynamically update the table. The Booking view includes: A table of bookings ( 1 ): Displays the list of bookings in a table. Guest info display ( 2 ): Displays the information of the guest associated with the selected booking. Room info display ( 3 ): Displays the information of the room associated with the selected booking. \"From\" date picker ( 4 ): Selects the start date of range to filter bookings. Automatically updates the table. \"To\" date picker ( 5 ): Selects the end date of range to filter bookings. Automatically updates the table. \"Sort by\" dropdown ( 6 ): Sorts the bookings based on the selected criteria. Automatically updates the table. \"Add Booking\" button ( 7 ): Opens a dialog to add a new booking. \"Delete Booking\" button ( 8 ): Deletes the selected booking. Shows a confirmation dialog first.","title":"Booking View"},{"location":"interface/#new-booking-dialog","text":"The New Booking dialog allows the user to add a new booking to the system. It includes the following elements: Guest table ( 1 ): Displays the list of guests to choose from. Room table ( 2 ): Displays the list of rooms to choose from. Dynamically updated based on selected dates according to availability. \"From\" date picker ( 3 ): Selects the start date of the booking. \"To\" date picker ( 4 ): Selects the end date of the booking. \"Add Booking\" button ( 5 ): Adds the booking to the system. Greyed out until both a guest and a room are selected. A confirmation dialog is shown after successfully adding a booking.","title":"New Booking Dialog"},{"location":"interface/#rooms-view","text":"The Rooms view displays a list of rooms along with the associated room type information. It provides functionality for viewing rooms. The Rooms view includes: A table of rooms ( 1 ): Displays the list of rooms in a table. Add Room button ( 2 ): Currently not implemented. Delete Room button ( 3 ): Currently not implemented.","title":"Rooms View"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}